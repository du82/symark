name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: app-linux-amd64
            
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: app-linux-arm64
            
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: app-macos-amd64
            
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: app-macos-arm64
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: app-windows-amd64.exe

    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        target: ${{ matrix.target }}
    
    - name: Install Cross-compilation dependencies
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target ${{ matrix.target }}
        
    - name: Prepare artifact
      shell: bash
      run: |
        mkdir -p artifacts
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp target/${{ matrix.target }}/release/your_binary_name.exe artifacts/${{ matrix.asset_name }}
        else
          cp target/${{ matrix.target }}/release/your_binary_name artifacts/${{ matrix.asset_name }}
          chmod +x artifacts/${{ matrix.asset_name }}
        fi
        
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: artifacts/${{ matrix.asset_name }}
        
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/app-linux-amd64/app-linux-amd64
          artifacts/app-linux-arm64/app-linux-arm64
          artifacts/app-macos-amd64/app-macos-amd64
          artifacts/app-macos-arm64/app-macos-arm64
          artifacts/app-windows-amd64.exe/app-windows-amd64.exe
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
